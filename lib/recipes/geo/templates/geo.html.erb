<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Collaboration Network Analysis for <%= who %></title>
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<style>
div#main {
	margin-left: 9px;
}
div.containers {
	margin-bottom: 32px;
}
div#narrative_container {
        width: 960px;
}
svg {
	border: 1px solid #ccc;
}
g.state text, g.country text {
	fill: white;
	font-family: Arial;
	text-anchor: middle;
	display:none;
}
g.state text{
	font-size: 8px;
}
g.country text {
	font-size: 2.75px;
}
g.city circle, circle.circleLegend {
	opacity: 0.5;
}
g.link {
	display:none;
}
g.link line {
	stroke: black;
	opacity: 0.3;
}
.navbar {
	border-radius: 0;
	border: none;
}
label {
	font-weight: normal;
}
span.numbers {
  font-weight: bold;
  color: red;
}
.scale_axis path, .scale_axis line {
	fill: none;
	stroke: #666;
	shape-rendering: crispEdges;
}
.scale_axis text{
	font-size: 11px;
	fill: #666;
	width: 20px;
}
.legendBox {
  stroke: #ccc;
  stroke-width: 0.25;
  fill: #FEFEF2;
}
text.legendTitle {
	font-family:Arial;
	font-weight: bold;
	fill: #666;
	font-size: 12px;
}
</style>
<script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>
<script src="http://d3js.org/d3.v3.min.js"></script>
</head>
<body>

<nav class="navbar navbar-inverse" role="navigation">
  <div class="navbar-header">
    <a class="navbar-brand" href="#">Collaboration Network Analysis for <%= who %></a>
  </div>
  <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
    <ul class="nav navbar-nav navbar-right">
      <li><a href="../authors"><span class="glyphicon glyphicon-user"></span> Authors</a></li>
      <li><a href="../geo"><span class="glyphicon glyphicon-map-marker"></span> Geographical</a></li>
    </ul>
  </div>
</nav>

<div id="main">
  <div id="narrative_container" class="alert alert-success">
  	<p>This data set contains <span class="numbers"><%= counts["references"].to_s %></span> references over a span of <span class="numbers"><%= (years.last.to_i - years.first.to_i).to_s %></span> years (<span class="numbers"><%= years.first %></span> - <span class="numbers"><%= years.last %></span>). Co-authorship can be found in:</p>
  	<ul>
  		<li>(at least) <span class="numbers"><%= counts["domestic_city"].to_s %></span> locations in (at least) <span class="numbers"><%= counts["domestic_state"].to_s %></span> states within the United States, and</li>
  		<li>(at least) <span class="numbers"><%= counts["world_city"].to_s %></span> locations in (at least) <span class="numbers"><%= counts["world_country"].to_s %></span> countries around the world.</li>
  	<ul>
  </div>
	<div id="domestic_map_container" class="containers">
		<h4>Domestic Collaboration Network</h4>
		<div class="controls">
			<input type="checkbox" id="domestic_cities" checked> <label>Show Cities</label>
			<input type="checkbox" id="domestic_links"> <label>Show City Links</label>
			<input type="checkbox" id="state_labels"> <label>Show State Labels</label>
		</div>
	</div>
	<div id="world_map_container" class="containers">
		<h4>International Collaboration Network</h4>
		<div class="controls">
			<input type="checkbox" id="world_cities" checked> <label>Show Cities</label>
			<input type="checkbox" id="world_links"> <label>Show City Links</label>
			<input type="checkbox" id="country_labels"> <label>Show Country Labels</label>
		</div>
	</div>
</div>

<script>
$( document ).ready(function() {
	drawDomesticMap();
	drawWorldMap();
	$("input#domestic_cities").change(function(){
		if ($(this).prop("checked") == true) {
			$("svg#domestic_map g.city").show();
		} else {
			$("svg#domestic_map g.city").hide();
			if ($("input#domestic_links").prop("checked") == true) {
				$("input#domestic_links").click();
			}
		}
	});
	$("input#domestic_links").change(function(){
		if ($(this).prop("checked") == true) {
			$("svg#domestic_map g.link").show();
			if ($("input#domestic_cities").prop("checked") == false) {
				$("input#domestic_cities").click();
			}
		} else {
			$("svg#domestic_map g.link").hide();
		}
	});
	$("input#state_labels").change(function(){
		$("svg#domestic_map g.state text").toggle();
	});
	$("input#world_cities").change(function(){
		if ($(this).prop("checked") == true) {
			$("svg#world_map g.city").show();
		} else {
			$("svg#world_map g.city").hide();
			if ($("input#world_links").prop("checked") == true) {
				$("input#world_links").click();
			}
		}
	});
	$("input#world_links").change(function(){
		if ($(this).prop("checked") == true) {
			$("svg#world_map g.link").show();
			if ($("input#world_cities").prop("checked") == false) {
				$("input#world_cities").click();
			}
		} else {
			$("svg#world_map g.link").hide();
		}
	});
	$("input#country_labels").change(function(){
		$("svg#world_map g.country text").toggle();
	});
});
function drawDomesticMap() {
  var centered;
	// Create the SVG for map in the map container div
	var svg = d3.select("div#domestic_map_container").append("svg")
		.attr("width", 960)
		.attr("height", 520)
		.attr("id", "domestic_map")
		.append("g");
	// Set up map projection
	var projection = d3.geo.albersUsa()
	// The map path
	var path = d3.geo.path().projection(projection);
	// Various scale defintions
	var circleSizeScale = d3.scale.linear()
	  .domain([0, 1])
		.range([1, 12]);
	var strokeWidthScale = d3.scale.linear()
	  .domain([0, 1])
		.range([1, 5]);
	var cityColorScale = d3.scale.linear()
	  .domain([0, 1])
		.range(["blue", "red"]);
	var stateColorScale = d3.scale.linear()
	  .domain([0, 1])
		.range(["rgb(237,248,233)","rgb(0,109,44)"]);
	d3.csv("states_all.csv", function(data){
		// Sort the state data and set the max value of scales
		state_max = d3.max(data, function(d) { return +d.count; });

		d3.json("us.json", function(json) {
			// Merging map data and count data
			for (var i = 0; i < data.length; i++) {
				var dataState = data[i].name;
				var dataValue = parseFloat(data[i].count);
				for (var j = 0; j < json.features.length; j++) {
					var jsonState = json.features[j].properties.name;
					if (dataState == jsonState) {
						json.features[j].properties.value = dataValue;
						break;
					}
				}
			}
			// Bind data with map
			group = svg.selectAll("g.state")
				.data(json.features)
				.enter()
				.append("g")
				.attr("class", "state");

			// Draw the map paths
			group.append("path")
				.attr("d", path)
				.style("fill", function(d) {
					var value = d.properties.value;
					if (value) {
					        return stateColorScale(Math.pow(value/state_max, 1/4));
					} else {
					        return "#ccc";
					}})
					.on("click", clicked)
					.append("svg:title")
					.text( function(d) { 
						n = d.properties.value;
						if (n === undefined) {
							n = 0;
						}
						return d.properties.name + " (" + n + ") "; 
					});
					
			// Add the state text labels
			group.append("text")
				.attr("x", function(d){ return path.centroid(d)[0]; })
				.attr("y", function(d){ return path.centroid(d)[1]; })
				.text( function(d) { 
					n = d.properties.value;
					if (n === undefined) {
						n = 0;
					}
					return d.properties.postal + " (" + n + ") "; 
				});
			// Add city circles
			d3.csv("cities_domestic.csv", function(csv){
				city_max = d3.max(csv, function(d) { return +d.count; });
				
				// Bind data with map
				group = svg.selectAll("g.city")
					.data(csv)
					.enter()
					.append("g")
					.attr("class", "city");
				// Add city circles
				group.append("circle")
					.attr("cx", function(d) { return projection([d.lng, d.lat])[0];})
					.attr("cy", function(d) { return projection([d.lng, d.lat])[1];})
					.attr("r", function(d){ return circleSizeScale(Math.pow(d.count/city_max, 1/3)) })
					.style("fill", function(d) { return cityColorScale(Math.pow(d.count/city_max, 1/3)) })
					.append("svg:title").text(function(d){
						return d.name + " (" + d.count + ")";
					});
				
			});
			// Add link lines
			d3.csv("spokes_domestic.csv", function(csv){
				spoke_max = d3.max(csv, function(d) { return +d.count; });
				
				// Bind data with map
				group = svg.selectAll("g.link")
					.data(csv)
					.enter()
					.append("g")
					.attr("class", "link");
				// Add the link lines
				group.append("line")
					.attr("x1", function(d){ return projection([d.lng1, d.lat1])[0]; })
					.attr("y1", function(d){ return projection([d.lng1, d.lat1])[1]; })
					.attr("x2", function(d){ return projection([d.lng2, d.lat2])[0]; })
					.attr("y2", function(d){ return projection([d.lng2, d.lat2])[1]; })
					.attr("stroke-width", function(d){ return strokeWidthScale(d.count/spoke_max); })
					.append("svg:title").text(function(d){
						return d.name1 + " - " + d.name2 + " (" + d.count + ")";
					});
			});
		});
		// Start drawing legend
		// The box first
		svg.append("rect").attr({
		  class: "legendBox",
		  width: 169,
		  height: 160,
		  x: 780,
		  y: 300
		});
		// The title
		svg.append("text").attr({
			class: "legendTitle",
			x: 793,
			y: 325
		}).text("Domestic Collaborations");
		// The squares
		// The first gray square
		svg.append("rect").attr({
			width: 12,
			height: 20,
			y: 345,
			x: 800,
			fill: "#ccc"
		});
		// The color scale squares
		var squareData = d3.range(9);
		var rects = svg.selectAll("rect.withScale").data(squareData);
		rects.enter()
			.append("rect")
			.attr({
				class: "withScale",
				width: 12,
				height: 20,
				y: 345,
				x: function(d, i) {
					return i*13 + 813;
				},
				fill: function(d, i) {
					return stateColorScale(d/10);
				}
			});
		// The circles
		var circleLegendData = [1, 10, 20, 100, 1000];
		var circs = svg.selectAll("circle.circleLegend").data(circleLegendData);
		circs.enter().append("circle")
			.attr({
				class: "circleLegend",
				cx: function(d, i) { return i*30 + 800; },
				cy: 410,
				r: function(d){ return circleSizeScale(Math.pow(d/1000, 1/3)); },
				fill: function(d) { return cityColorScale(Math.pow(d/1000, 1/3)); }
			});
		// The two axes
		var xAxis = d3.svg.axis();
		var xAxisScale = d3.scale.ordinal().domain(["Fewer", "More"]).range([0,129]);
		xAxis.scale(xAxisScale).orient("bottom");
		// Draw two of them
		svg.append("g").attr("class", "scale_axis").attr("transform", "translate(800,370)").call(xAxis);
		svg.append("g").attr("class", "scale_axis").attr("transform", "translate(800,427)").call(xAxis);
	});
	function clicked(d) {
	  var x, y, k;
	  if (d && centered !== d) {
	    var centroid = path.centroid(d);
	    x = centroid[0];
	    y = centroid[1];
	    k = 4;
	    centered = d;
	  } else {
	    x = 960 / 2;
	    y = 520 / 2;
	    k = 1;
	    centered = null;
	  }
	  svg.selectAll("path")
	      .classed("active", centered && function(d) { return d === centered; });
	  svg.transition()
	      .duration(750)
	      .attr("transform", "translate(" + 960 / 2 + "," + 520 / 2 + ")scale(" + k + ")translate(" + -x + "," + -y + ")")
	      .style("stroke-width", 1.5 / k + "px");
	}
}
function drawWorldMap() {
  var centered;
	// Create the SVG for map in the map container div
	var svg = d3.select("div#world_map_container").append("svg")
		.attr("width", 960)
		.attr("height", 520)
		.attr("id", "world_map")
		.append("g");
	// Set up map projection
	var projection = d3.geo.mercator()
		.center([0, 28])
		.scale(158)
		.rotate([-9,0]);
	// The map path
	var path = d3.geo.path().projection(projection);
	// Various scale defintions
	var circleSizeScale = d3.scale.linear()
	  .domain([0, 1])
		.range([1, 12]);
	var strokeWidthScale = d3.scale.linear()
	  .domain([0, 1])
		.range([1, 5]);
	var cityColorScale = d3.scale.linear()
	  .domain([0, 1])
		.range(["blue", "red"]);
	var countryColorScale = d3.scale.linear()
	  .domain([0,1])
		.range(["rgb(237,248,233)","rgb(0,109,44)"]);
		
	d3.csv("countries_all.csv", function(data){
		country_max = d3.max(data, function(d) { return +d.count; })

		d3.json("world.json", function(json) {
			// Merging map data with count data
			for (var i = 0; i < data.length; i++) {
				var dataCountry = data[i].name;
				var dataValue = parseFloat(data[i].count);
				for (var j = 0; j < json.features.length; j++) {
					var jsonCountry = json.features[j].properties.name;
					if (dataCountry == jsonCountry) {
						json.features[j].properties.value = dataValue;
						break;
					}
				}
			}
			// Bind data to map
			group = svg.selectAll("g.country")
				.data(json.features)
				.enter()
				.append("g")
				.attr("class", "country")
			// Draw the countries
			group.append("path")
				.attr("d", path)
				.style("fill", function(d) {
					var value = d.properties.value;
					if (value) {
						return countryColorScale(Math.pow(value/country_max, 1/4));
					} else {
						return "#ccc";
					}
				})
				.on("click", clicked)
				.append("svg:title").text( function(d) { 
  					n = d.properties.value;
  					if (n === undefined) {
  						n = 0;
  					}
  					return d.properties.name + " (" + n + ") "; 
  				});
				group.append("text")
  				.attr("x", function(d){ return path.centroid(d)[0]; })
  				.attr("y", function(d){ return path.centroid(d)[1]; })
  				.text( function(d) { 
  					n = d.properties.value;
  					if (n === undefined) {
  						n = 0;
  					}
  					return d.properties.name + " (" + n + ") "; 
  				});
  				
			// Add city circles
			d3.csv("cities_all.csv", function(csv){
				city_max = d3.max(csv, function(d) { return +d.count; });
				
				// Bind data with map
				group = svg.selectAll("g.city")
					.data(csv)
					.enter()
					.append("g")
					.attr("class", "city");
				// Add city circles
				group.append("circle")
					.attr("cx", function(d) { return projection([d.lng, d.lat])[0];})
					.attr("cy", function(d) { return projection([d.lng, d.lat])[1];})
					.attr("r", function(d){ return circleSizeScale(Math.pow(d.count/city_max, 1/3)); })
					.style("fill", function(d) { return cityColorScale(Math.pow(d.count/city_max, 1/3)); })
					.append("svg:title").text(function(d){
						return d.name + " (" + d.count + ")";
					});
					
			});
			// Add link lines
			d3.csv("spokes_all.csv", function(csv){
				spoke_max = d3.max(csv, function(d) { return +d.count; });
				// Bind map with data
				group = svg.selectAll("g.link")
					.data(csv)
					.enter()
					.append("g")
					.attr("class", "link");
				// Add link lines
				group.append("line")
					.attr("x1", function(d){ return projection([d.lng1, d.lat1])[0]; })
					.attr("y1", function(d){ return projection([d.lng1, d.lat1])[1]; })
					.attr("x2", function(d){ return projection([d.lng2, d.lat2])[0]; })
					.attr("y2", function(d){ return projection([d.lng2, d.lat2])[1]; })
					.attr("stroke-width", function(d){ return strokeWidthScale(d.count/spoke_max); })
					.append("svg:title").text(function(d){
						return d.name1 + " - " + d.name2 + " (" + d.count + ")";
					});
			});
		});
		// Start drawing the legend
		// The box
		svg.append("rect").attr({
		  class: "legendBox",
		  width: 169,
		  height: 160,
		  x: 29,
		  y: 300
		});
		// The title
		svg.append("text").attr({
			class: "legendTitle",
			x: 35,
			y: 325
		}).text("International Collaborations");
		// The squares
		// The first gray square
		svg.append("rect").attr({
			width: 12,
			height: 20,
			y: 345,
			x: 49,
			fill: "#ccc"
		});
		// The color scale squares
		var squareData = d3.range(9);
		var rects = svg.selectAll("rect.withScale").data(squareData);
		rects.enter()
			.append("rect")
			.attr({
				class: "withScale",
				width: 12,
				height: 20,
				y: 345,
				x: function(d, i) {
					return i*13 + 62;
				},
				fill: function(d, i) {
					return countryColorScale(d/10);
				}
			})
		// The circles
		var circleLegendData = [1, 10, 20, 100, 1000];
		var circs = svg.selectAll("circle.circleLegend").data(circleLegendData);
		circs.enter().append("circle")
			.attr({
				class: "circleLegend",
				cx: function(d, i) { return i*30 + 49; },
				cy: 410,
				r: function(d){ return circleSizeScale(Math.pow(d/1000, 1/3)); },
				fill: function(d) { return cityColorScale(Math.pow(d/1000, 1/3)); }
			})
		// The axes
		var xAxis = d3.svg.axis();
		var xAxisScale = d3.scale.ordinal().domain(["Fewer", "More"]).range([0,129]);
		xAxis.scale(xAxisScale).orient("bottom");
		// Draw two of them
		svg.append("g").attr("class", "scale_axis").attr("transform", "translate(49,370)").call(xAxis);
		svg.append("g").attr("class", "scale_axis").attr("transform", "translate(49,427)").call(xAxis);
	});
	function clicked(d) {
	  var x, y, k;
	  if (d && centered !== d) {
	    var centroid = path.centroid(d);
	    x = centroid[0];
	    y = centroid[1];
	    k = 4;
	    centered = d;
	  } else {
	    x = 960 / 2;
	    y = 520 / 2;
	    k = 1;
	    centered = null;
	  }
	  svg.selectAll("path")
	      .classed("active", centered && function(d) { return d === centered; });
	  svg.transition()
	      .duration(750)
	      .attr("transform", "translate(" + 960 / 2 + "," + 520 / 2 + ")scale(" + k + ")translate(" + -x + "," + -y + ")")
	      .style("stroke-width", 1.5 / k + "px");
	}
}
</script>
</body>
</html>
